#!/usr/bin/env python3

import argparse
import pathlib
import mimetypes
import jinja2
import shutil
import json
import os

from subprocess import run
from datetime import datetime
from zipfile import ZipFile
from ue_mecanique import (
    load_excel,
    is_excel,
    render_markdown,
    extract_excel_image,
    extract_external_image,
    TAGS_UE,
)

def get_git_date(file):
    return run(
        f"git -C {file.parent} log -1 --pretty=%ci -- {file.name}"
        .split(),
        capture_output=True,
    ).stdout.decode('ascii').strip()


def main():
    mimetypes.init()

    parser = argparse.ArgumentParser(description="Convert excel file to markdown")
    parser.add_argument("file", type=pathlib.Path)
    parser.add_argument("-o", "--output-dir", type=pathlib.Path, required=True)
    parser.add_argument("-t", "--template", type=pathlib.Path, required=True)
    parser.add_argument("--tags", type=pathlib.Path, required=True)

    args = parser.parse_args()

    # Creating output directory
    args.output_dir.mkdir(parents=True, exist_ok=True)

    # Reading template
    with open(args.template) as fd:
        template = jinja2.Template(fd.read())

    # Reading tags
    tags = TAGS_UE

    # Generating the file
    file = args.file
    info = load_excel(file, comment="#", index_col=0).to_dict()
    info['modified_date'] = get_git_date(file)

    if "image" in info and info["image"]["value"] != "":
        image_file = extract_external_image(file,
                                            pathlib.Path(info["image"]["value"]),
                                            args.output_dir)
    else:
        image_file = extract_excel_image(file, args.output_dir)

    if image_file is not None:
        info["image"] = dict(value=image_file.name)

    info["tags"] = tags[info["code"]["value"]]
    markdown = render_markdown(template, info)
    out_file = args.output_dir / (file.stem + ".md")

    with open(out_file, "w") as fd:
        fd.write(markdown)


if __name__ == "__main__":
    main()
